#!/bin/bash #использование интерпретатора Bash
#$1: переменная, путь к директории, содержащей .jpg изображения.
#$2: общая длительность анимации в секундах.
#$3: имя выходного файла для созданного GIF(куда будет сохранен анимированный GIF)
# Проверка на наличие параметров и вывод справки
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo 'The help is shown' #инфомация о справке
    exit 0
fi #завершение команд с if then

# Проверка наличия необходимых параметров, аргументов
if [ $# -ne 3 ]; then 
# $# - сколько параметров передано
# -n Возвращает истинное значение, если # не равно 3
    echo "Use --help to get help." #Используйте --help, чтобы получить помощь.
    exit 1
fi

# Переход в указанную директорию
cd "$1" || { echo "Error: Could not navigate to the directory '$1'."; exit 1; } #cd - переход в директорию #если переход не получился, то выводит ошибку и завершает вып скрипта

# Поиск и сортировка изображений
input=( $(find . -name "*.jpg" | sort) ) # Команда find ищет все файлы формата .jpg в текущей директории. Результаты сортируются и сохраняются в массив input.
#Находит все .jpg изображения, сортирует их и конвертирует каждое в черно-белый формат, сохраняя в массив
#sort сортирует строки по возрастанию,

#$() - извлекать информацию из вывода команд и назначать её переменным, что позволяет использовать эту информацию где угодно в файле

# Преобразование изображений в черно-белые
BW_IMAGES=() #Изображения
for file in "${input[@]}"; do #[@]-все эл-ты массива
    bw_file="${file%.jpg}_bw.jpg" #{} - использование переменных массива
    convert "$file" -colorspace Gray "$bw_file" 
    #Для каждого найденного изображения создается черно-белая версия с помощью команды convert. 
    #Название нового файла формируется добавлением _bw перед расширением.
    BW_IMAGES+=("$bw_file")  # Добавляем в массив черно-белых изображений
done

# Проверка, что массив не пустой
if [ ${#BW_IMAGES[@]} -eq 0 ]; then  #-eq Возвращает истинное значение, если {#BW_IMAGES[@]} равно 0
    echo "Error: No images were found for processing."  #Изображений для обработки найдено не было
    exit 1
fi

# Сортировка изображений в алфавитном порядке
sorted_images=($(printf '%sn' "${BW_IMAGES[@]}" | sort)) #сортировка и сохранение черн-бел изображ. в массив sorted_images
#| - Оператор конвейера передаёт выходные данные одной команды в качестве входных данных другой
# Рассчет времени показа каждого изображения

IMAGE_COUNT=${#sorted_images[@]}  #КОЛИЧЕСТВО ИЗОБРАЖЕНИЙ
DELAY=$(echo "scale=2; $2 / $IMAGE_COUNT" | bc) #bc - рассчитывает задержку между показами изображений.
# | - Оператор конвейера передаёт выходные данные одной команды в качестве входных данных другой

# Создание анимированного GIF
convert -delay "$DELAY" "${sorted_images[@]}" "$3" #convert - создание анимированного GIF 
#Рассчитывает задержку между кадрами на основе общего времени анимации и количества изображений, а затем создает GIF с использованием утилиты convert.
