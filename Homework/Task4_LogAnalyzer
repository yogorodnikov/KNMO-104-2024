#!/bin/bash

# Функция для отображения справки
spravka() {
    echo "Использование: нужно ввести 2 параметра:"
    echo "исполняемый файл и файл, который нужно обработать"
    echo "Пример (в нашем случае): ./LogAnalyzer.sh logs.log"
    echo "Вы также можете использовать -h или --help для отображения этой справки."
    echo "p.s. пожалуйста не гасите, а то у меня так долг по осям накопится:)"
    exit 1
}

# Проверка входных параметров
if [[ $# -ne 1 ]]; then
    spravka
fi

# Проверка на наличие параметров -h или --help
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    spravka
fi

log_file="$1"

# Проверка существования файла
if [[ ! -f $log_file ]]; then
    echo "Ошибка: файл '$log_file' не найден!"
    exit 1
fi

# Извлечение времени обработки запросов
exec_times=($(awk -F '|' '{print $5}' "$log_file")) #здесь утилита awk для работы с текстовыми файлами, -F для разделения по символу (в данном случае по |), {print $5} для вывода пятого поля каждой строки, ну log_file ясен красен для чего нужен. А ну и $ нужен для подстановки аргументов если что

# Вычисление 99-го перцентиля
sorted_times=($(printf '%s\n' "${exec_times[@]}" | sort -n)) #@ это все элементы массива printf — это команда для форматированного вывода. В данном случае, формат '%s\n' указывает на то, что каждый элемент массива exec_times будет выведен на новой строке. sort -n — команда, которая сортирует строки. Флаг -n указывает на то, что сортировка должна быть числовой. Это полезно, если элементы массива exec_times — числа, так как сортировка по умолчанию выполняется лексикографически (по алфавиту).
count=${#sorted_times[@]} #  выполняется подсчет количества элементов в массиве sorted_times.
percentile_index=$((count * 99 / 100)) #ну тут всё понятно
percentile_value=${sorted_times[$percentile_index]} #извлекает значение из массива sorted_times по вычисленному индексу percentile_index. Это значение представляет собой 99-й перцентиль временных значений, то есть 99% всех временных значений меньше или равно этому значению.

# Создание нового файла с отфильтрованными логами
output_file="filtered_logs.txt"
{
    echo "Фильтрованные логи (время обработки < $percentile_value):"
    awk -F '|' -v threshold="$percentile_value" '{ if ($5 < threshold) print }' "$log_file" # -v здесь позволяет передавать значения из внешнего окружения в awk
} > "$output_file"

echo "Обработка завершена. Новый файл с логами: $output_file"

